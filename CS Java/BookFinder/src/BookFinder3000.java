
import java.io.File; //Import all necessary classes
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 File Name:	BookFinder
Programmer:	Cole Becker
Date:		April 10th 2024
Purpose:        To create a program to search for a book within a text file using both linear
*               and binary search methods. 
 */
/**
 *
 * @author rando
 */
public class BookFinder3000 extends javax.swing.JFrame {

    /**
     * Creates new form BookFinder3000
     */
    public BookFinder3000() {
        initComponents();
    }
    
    public static ArrayList<Book> books = new ArrayList<Book>(); //Create arraylist with book class called books
   
    public static String linearSearchFound; //Create strings that will hold the bookname of the reference number for each search method if found
    public static String binarySearchFound;
    
    public static class Book { //Create book class that holds variable referenceNumber and bookName
        String referenceNumber, bookName;
        public Book (String _referenceNumber, String _bookName){
            referenceNumber = _referenceNumber;
            bookName = _bookName;
        }
    }
    
    public static boolean linearSearch(int A){ //Create boolean search method linearSearch
        for (int i = 0; i < books.size(); i++){ //Create variable i and set it to zero that increases in increments
            if (Integer.parseInt(books.get(i).referenceNumber) == A){ //If the book reference number equals the search variable
                linearSearchFound = books.get(i).bookName; //Set this variable equal to book name
                return true; //Return true if found
            }
        }
        return false; //Return false if not found
    }
    
    //Only works if arraylist is sorted by reference number
    public static boolean binarySearch(int A){ //Create boolean search method binarySearch
        int left = 0; //Create variable left equal to zero
        int right = books.size() - 1; //Create variable right equal to the size of the arraylist minus one
        
        while (right >= left) { //As long as the right variable is equal to or more than the left side
            int mid = (left + right) / 2; //Create variable mid to store the middle of the list
            if (Integer.parseInt(books.get(mid).referenceNumber) == A){ //If the middle equals the search variable
                binarySearchFound = books.get(mid).bookName; //Store the book name in variable
                return true; //Variable found return true
            }
            if (Integer.parseInt(books.get(mid).referenceNumber) < A){ //If the middle is less than the search variable
                left = mid + 1; //Remove left side of mid of arraylist by making left equal to mid plus one
            }
            if (Integer.parseInt(books.get(mid).referenceNumber) > A){ //If the middle is more than search variable
                right = mid - 1; //Remove right side of mid of arraylist by making right equal to mid minus one
            }
        }
        return false; //If not found return false
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        userInput = new javax.swing.JTextField();
        linearOutput = new javax.swing.JTextField();
        binaryOutput = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Book Finder");

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Book Finder");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Please enter the books reference number:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Linear Search:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Binary Search:");

        userInput.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        linearOutput.setEditable(false);
        linearOutput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        linearOutput.setForeground(new java.awt.Color(0, 0, 153));

        binaryOutput.setEditable(false);
        binaryOutput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        binaryOutput.setForeground(new java.awt.Color(0, 0, 153));

        btnSearch.setText("Search!");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(binaryOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(linearOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(userInput, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(btnSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(linearOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(binaryOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        try { //Try to change user input into integer
            
            if (linearSearch(Integer.parseInt(userInput.getText()))){ //If linearSearch method boolean returns true then book found
                linearOutput.setText("Book Found: " + linearSearchFound + "."); //Set text of linearOutput to bookname of the refeference number
            } else {
                linearOutput.setText("Book Not Found."); //If not found set text to book not found
            }
            
            if (binarySearch(Integer.parseInt(userInput.getText()))){ //If binarySearch method boolean returns true then book found
                binaryOutput.setText("Book Found: " + binarySearchFound + "."); //Set text of binaryOutput to book found + book name
            } else {
                binaryOutput.setText("Book Not found."); //If not found set text to book not found
            }
            
        } catch (NumberFormatException e) { //Catch Numberformat exception if non integer entered
            JOptionPane.showMessageDialog(null, "Error: Please enter a valid reference number."); //Show popup of error
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException {
        File file = new File("BooksFile.txt"); //Create new file named file and reads booksfile.txt
        Scanner scan = new Scanner(file); //Create scanner for scanning each line of file
        
        while (scan.hasNextLine()) { //While file has next line
            Book c; 
            String referenceNumber = scan.nextLine(); //String reference number equals next line
            String bookName = scan.nextLine(); //String bookname equals the line after
            c = new Book(referenceNumber, bookName); //Create new class book with data of referenceNumber and bookName
            books.add(c); //Add the book to the arraylist books
        }
        
        //After all data of txt file is added to arraylist, we must sort by reference number for the search methods to work correctly
        //Sort books by turning the reference number into integers and comparing book1 to book2
       Collections.sort(books, (book1, book2) -> Integer.compare(Integer.parseInt(book1.referenceNumber), Integer.parseInt(book2.referenceNumber)));
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookFinder3000().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField binaryOutput;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField linearOutput;
    private javax.swing.JTextField userInput;
    // End of variables declaration//GEN-END:variables
}
